/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Balanceador;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author afons
 */
public class Balanceador extends javax.swing.JFrame {
    
    private ArrayList<ServerInformation> maquinas;
    ServiceBalanceador worker;
    int porta;
    /**
     * Creates new form Balanciador
     */
    public Balanceador() {
        initComponents();
        this.porta = 5000;
        this.log.setText("Balanceador Fractal");
        this.worker = new ServiceBalanceador(this.log, porta);
        this.worker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        log.setColumns(20);
        log.setRows(5);
        log.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                logAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        log.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                logInputMethodTextChanged(evt);
            }
        });
        log.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                logPropertyChange(evt);
            }
        });
        log.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                logKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(log);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_logAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_logAncestorAdded

    private void logInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_logInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_logInputMethodTextChanged

    private void logPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_logPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_logPropertyChange

    private void escreverLog(String linhas){
        Date date = new Date();
        Calendar calen = Calendar.getInstance();
        calen.setTime(date);
        String lin = this.log.getText();
        lin += "\n" + calen.get(Calendar.DAY_OF_MONTH)+":"+(calen.get(Calendar.MONTH) + 1)+":"+calen.get(Calendar.YEAR)+" "+calen.get(Calendar.HOUR_OF_DAY)+":"+calen.get(Calendar.MINUTE)+":"+calen.get(Calendar.SECOND)+" :: " + linhas + "\nBalanceador>";
        this.log.setText(lin);
        this.log.setCaretPosition(this.log.getText().length());
    }
    
    private void comando(String comando){
        try{
        if(comando.equals("start")){//o utilizador a digitar o comando start, inicia a o balanciador
            if(this.worker.getStop()){
                this.worker = new ServiceBalanceador(this.log, porta);//inicializa o swingworker do balanciador 
                this.worker.execute();//executa o swingworker
                escreverLog("Servidor Inicializado");//escreve um log
            }
            else escreverLog("Balanceador já se encontrava Ligado");//caso o balanciador já esteja a escuta, avisa
        }
        else if(comando.equals("stop")){//o utilizador a digitar o comando stop, para o balanciador
            if(!this.worker.getStop()){
                this.worker.removeMaquinas();//remove todas  as maquinas do balanciador
                this.worker.stop();//para a escuta do balanciador
                escreverLog("Servidor Finalizado");//escreve um log
            }
            else escreverLog("Balanceador já se encontrava desligado");//caso o balanciador já esteja parado, avisa
        }
        else if(comando.equals("help")){//caso o utilizador escreva o comando help, motra todos os comandos, possiveis
            String result = "Possiveis comandos:\n";
            result += "start\n";
            result += "stop\n";
            result += "help\n";
            result += "show servers\n";
            //result += "add server ???.???.???.???:????\n";
            //result += "remove server ???.???.???.???:????\n";
            result += "change port to ????";
            escreverLog(result);
        }
        else if(comando.equals("show servers")){//caso o utilizador escreva o comando show servers, mostra todos os servidor ligados
            this.log.setText(this.log.getText() + "\n" + this.worker.showMaquinas() + "\nBalanceador>" );
        }
        //else if(comando.contains("add server")){}
        //else if(comando.contains("remove server")){}
        else if(comando.contains("change port to ")){//altera aporta do escuta do servidor
            String st = comando.replace("change port to ", "");
            this.porta = Integer.parseInt(st);
            if(!this.worker.getStop()){//o balanciador para de ouvir
                this.worker.stop();
            }
            this.worker.removeMaquinas();//remove todas as maquinas
            Thread.sleep(100);
            this.worker = new ServiceBalanceador(this.log, porta);//reanicializa o servidor
            this.worker.execute();//executa o swingworker do servidor
            escreverLog("Servidor Inicializado");//Escreve no log
            
        }
        else {
            String result = "Comando não encontrado, possiveis comandos:\n";//caso o comando digitado não exista, omstra todos os comando possiveis
            result += "start\n";
            result += "stop\n";
            result += "help\n";
            result += "show servers\n";
            result += "change port to ????";
            escreverLog(result);
        }
        }
        catch(Exception ex){
            escreverLog(ex.getMessage());
        }
    }
    
    private void logKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == '\n'){//sempre que o utilzador preciona a tecla enter,  um comando é executado
            String texto = this.log.getText().substring(0, this.log.getText().length() - 1);
            this.log.setText(texto);
            int linha = texto.lastIndexOf(">");
            texto = texto.substring(linha + 1, texto.length());
            comando(texto);
        }
    }//GEN-LAST:event_logKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(!this.worker.getStop()){
            this.worker.removeMaquinas();
            this.worker.stop();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Balanceador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Balanceador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Balanceador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Balanceador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Balanceador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log;
    // End of variables declaration//GEN-END:variables
}
